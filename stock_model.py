# -*- coding: utf-8 -*-
"""Stock_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ova5NRE5s21C3huIICS2wGlokcuShwl5
"""

# main.py
import time
import yfinance as yf
import pandas as pd
import pandas_ta as ta
import numpy as np
import streamlit as st
from datetime import datetime
from st_autorefresh import st_autorefresh

# Hardcoded ticker list
TICKERS = [
    "AARTIIND", "ABB", "ABBOTINDIA", "ABCAPITAL", "ABFRL", "ACC", "ADANIENSOL",
    "ADANIENT", "ADANIGREEN", "ADANIPORTS", "ALKEM", "AMBUJACEM", "ANGELONE",
    "APLAPOLLO", "APOLLOHOSP", "APOLLOTYRE", "ASHOKLEY", "ASIANPAINT", "ASTRAL",
    "ATGL", "ATUL", "AUBANK", "AUROPHARMA", "AXISBANK", "BAJAJ-AUTO", "BAJAJFINSV",
    "BAJFINANCE", "BALKRISIND", "BANDHANBNK", "BANKBARODA", "BANKINDIA", "BATAINDIA",
    "BEL", "BERGEPAINT", "BHARATFORG", "BHARTIARTL", "BHEL", "BIOCON", "BOSCHLTD",
    "BPCL", "BRITANNIA", "BSE", "BSOFT", "CAMS", "CANBK", "CANFINHOME", "CDSL",
    "CESC", "CGPOWER", "CHAMBLFERT", "CHOLAFIN", "CIPLA", "COALINDIA", "COFORGE",
    "COLPAL", "CONCOR", "COROMANDEL", "CROMPTON", "CUB", "CUMMINSIND", "CYIENT",
    "DABUR", "DALBHARAT", "DEEPAKNTR", "DELHIVERY", "DIVISLAB", "DIXON", "DLF",
    "DMART", "DRREDDY", "EICHERMOT", "ESCORTS", "EXIDEIND", "FEDERALBNK", "GAIL",
    "GLENMARK", "GMRAIRPORT", "GNFC", "GODREJCP", "GODREJPROP", "GRANULES", "GRASIM",
    "GUJGASLTD", "HAL", "HAVELLS", "HCLTECH", "HDFCAMC", "HDFCBANK", "HDFCLIFE",
    "HEROMOTOCO", "HFCL", "HINDALCO", "HINDCOPPER", "HINDPETRO", "HINDUNILVR", "HUDCO",
    "ICICIBANK", "ICICIGI", "ICICIPRULI", "IDEA", "IDFCFIRSTB", "IEX", "IGL", "INDHOTEL",
    "INDIAMART", "INDIANB", "INDIGO", "INDUSINDBK", "INDUSTOWER", "INFY", "IOC", "IPCALAB",
    "IRB", "IRCTC", "IRFC", "ITC", "JINDALSTEL", "JIOFIN", "JKCEMENT", "JSL", "JSWENERGY",
    "JSWSTEEL", "JUBLFOOD", "KALYANKJIL", "KEI", "KOTAKBANK", "KPITTECH", "LALPATHLAB",
    "LAURUSLABS", "LICHSGFIN", "LICI", "LODHA", "LT", "LTF", "LTIM", "LTTS", "LUPIN", "M&M",
    "M&MFIN", "MANAPPURAM", "MARICO", "MARUTI", "MAXHEALTH", "MCX", "METROPOLIS", "MFSL",
    "MGL", "MOTHERSON", "MPHASIS", "MRF", "MUTHOOTFIN", "NATIONALUM", "NAUKRI", "NAVINFLUOR",
    "NBCC", "NCC", "NESTLEIND", "NHPC", "NMDC", "NTPC", "NYKAA", "OBEROIRLTY", "OFSS", "OIL",
    "ONGC", "PAGEIND", "PAYTM", "PEL", "PERSISTENT", "PETRONET", "PFC", "PHOENIXLTD",
    "PIDILITIND", "PIIND", "PNB", "POLICYBZR", "POLYCAB", "POONAWALLA", "POWERGRID",
    "PRESTIGE", "PVRINOX", "RAMCOCEM", "RBLBANK", "RECLTD", "RELIANCE", "SAIL", "SBICARD",
    "SBILIFE", "SBIN", "SHREECEM", "SHRIRAMFIN", "SIEMENS", "SJVN", "SOLARINDS", "SONACOMS",
    "SRF", "SUNPHARMA", "SUNTV", "SUPREMEIND", "SYNGENE", "TATACHEM", "TATACOMM", "TATACONSUM",
    "TATAELXSI", "TATAMOTORS", "TATAPOWER", "TATASTEEL", "TCS", "TECHM", "TIINDIA", "TITAN",
    "TORNTPHARM", "TORNTPOWER", "TRENT", "TVSMOTOR", "UBL", "ULTRACEMCO", "UNIONBANK",
    "UNITDSPR", "UPL", "VBL", "VEDL", "VOLTAS", "WIPRO", "YESBANK", "ZOMATO", "ZYDUSLIFE"
]

npNaN = np.NaN

@st.cache_data(ttl=300, show_spinner="Fetching live data...")
def fetch_live_data(tickers, period="60d", interval="1h"):
    all_data = {}
    for ticker in tickers:
        ticker_full = f"{ticker}.NS"
        try:
            stock = yf.Ticker(ticker_full)
            data = stock.history(period=period, interval=interval, auto_adjust=True)

            if not data.empty and len(data) > 10:
                data.reset_index(inplace=True)
                if 'Datetime' in data.columns:
                    data.rename(columns={'Datetime': 'Date'}, inplace=True)
                numeric_cols = ['Open', 'High', 'Low', 'Close', 'Volume']
                for col in numeric_cols:
                    data[col] = pd.to_numeric(data[col], errors='coerce')
                data.dropna(subset=['Close'], inplace=True)
                data.reset_index(inplace=True)
                all_data[ticker_full] = data
            else:
                continue
        except Exception as e:
            continue
    return all_data

def calculate_indicators(data):
    # ... keep the same calculate_indicators function from original code ...

def display_sorted_metrics(data_dict):
    # ... keep the same display_sorted_metrics function from original code ...

def main():
    st.set_page_config(
        page_title="Live Stock Metrics",
        page_icon="ðŸ“ˆ",
        layout="wide"
    )

    st.title("Live Indian Stock Market Metrics")
    st.write("Automatically updates every 100 seconds")

    data_dict = fetch_live_data(TICKERS)

    for ticker in list(data_dict.keys()):
        data_dict[ticker] = calculate_indicators(data_dict[ticker])

    metrics_table = display_sorted_metrics(data_dict)

    if not metrics_table.empty:
        st.subheader("Real-time Technical Metrics")
        st.dataframe(metrics_table, use_container_width=True, height=800)

        # Add download button
        csv = metrics_table.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="Download data as CSV",
            data=csv,
            file_name=f"stock_metrics_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
            mime='text/csv'
        )
    else:
        st.warning("No data available currently")

    # Auto-refresh every 100 seconds
    st_autorefresh(interval=100 * 1000, key="data_refresh")

if __name__ == "__main__":
    main()